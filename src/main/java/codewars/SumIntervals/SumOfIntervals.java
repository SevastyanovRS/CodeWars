package codewars.SumIntervals;

import org.apache.commons.lang3.tuple.Pair;

import java.util.Arrays;
import java.util.HashSet;
import java.util.Set;
import java.util.stream.Collectors;

import static org.junit.Assert.assertEquals;

public class SumOfIntervals {
    public static void main(String[] args) {
        assertEquals(7, sumIntervals(new int[][]{{1, 4}, {7, 10}, {3, 5}}));
        assertEquals(0, sumIntervals(new int[][]{}));
        assertEquals(0, sumIntervals(new int[][]{{4, 4}, {6, 6}, {8, 8}}));

        assertEquals(54, sumIntervals(new int[][]{{1, 2}, {2, 6}, {6, 55}}));

        assertEquals(23, sumIntervals(new int[][]{{-2, -1}, {-1, 0}, {0, 21}}));

        assertEquals(9, sumIntervals(new int[][]{{1, 2}, {6, 10}, {11, 15}}));

        assertEquals(11, sumIntervals(new int[][]{{4, 8}, {9, 10}, {15, 21}}));
        assertEquals(7, sumIntervals(new int[][]{{-1, 4}, {-5, -3}}));
        assertEquals(78, sumIntervals(new int[][]{{-245, -218}, {-194, -179}, {-155, -119}}));
        assertEquals(2_000_000_000, sumIntervals(new int[][]{{-1_000_000_000, 1_000_000_000}}));

        assertEquals(100_000_030, sumIntervals(new int[][]{{0, 20}, {-100_000_000, 10}, {30, 40}}));

        assertEquals(13, sumIntervals(new int[][]{{2, 5}, {-1, 2}, {-40, -35}, {6, 8}}));
        assertEquals(1234, sumIntervals(new int[][]{{-7, 8}, {-2, 10}, {5, 15}, {2000, 3150}, {-5400, -5338}}));
        assertEquals(158, sumIntervals(new int[][]{{-101, 24}, {-35, 27}, {27, 53}, {-105, 20}, {-36, 26},}));

        assertEquals(7, sumIntervals(new int[][]{{1, 4}, {7, 10}, {3, 5}}));
        assertEquals(6, sumIntervals(new int[][]{{5, 8}, {3, 6}, {1, 2}}));
        assertEquals(19, sumIntervals(new int[][]{{1, 5}, {10, 20}, {1, 6}, {16, 19}, {5, 11}}));
        assertEquals(795458001, sumIntervals(new int[][]{{469977175, 474611618}, {306972694, 308639726}, {-317756359, -313942294}, {183013982, 192316865}, {-97606715, -87863661}, {-156395568, -154902975}, {-898819481, -891125995}, {-650617154, -645354331}, {-971196773, -967348371}, {785806248, 792084160}, {-992810647, -985480905}, {947049594, 956388122}, {817792608, 824826180}, {734027470, 740128745}, {-884270653, -882387808}, {754649372, 758031753}, {247743552, 250144151}, {-761316908, -759548542}, {749675854, 756637851}, {-83248257, -77951147}, {399123746, 403966771}, {269518799, 275340368}, {-57266336, -52974942}, {-78599644, -76574309}, {-428019083, -418321810}, {-503733558, -497245201}, {14991886, 24961678}, {601244381, 609809983}, {281820586, 291004350}, {-432364364, -429149111}, {-338077678, -332046224}, {356057323, 357556428}, {-216589194, -213977533}, {-689272308, -688223375}, {472673062, 477508364}, {67246297, 74469547}, {-531742510, -522154553}, {-978653285, -969229643}, {-297447299, -296258500}, {-479862297, -475411196}, {-723544115, -719053379}, {-775319133, -770663835}, {776192770, 779642816}, {-545291648, -543193262}, {-789020679, -780661688}, {-199903353, -198499305}, {541691142, 544319397}, {-422693365, -414812217}, {331286611, 337186543}, {-572017243, -563093486}, {-995559820, -986909469}, {413837701, 419764863}, {-157988594, -151730826}, {-388739862, -379811064}, {-445354606, -438086424}, {501793964, 509870530}, {-85936842, -84681073}, {-576107624, -571591710}, {-827112720, -817667429}, {-474152540, -466491449}, {-9849950, -4287794}, {-44407139, -42048638}, {-78945113, -75637350}, {-246545336, -241299176}, {548815127, 557480804}, {-980810687, -972623504}, {-294569433, -286637782}, {862785767, 866793997}, {-649614564, -642718698}, {472259303, 474742103}, {174899946, 181257570}, {-480596636, -476661892}, {616410477, 620612074}, {715528896, 717003961}, {-143993277, -136714285}, {258108426, 260274068}, {-25411772, -19795110}, {-278077659, -269184868}, {-847737479, -839354952}, {404978739, 412533671}, {-415944380, -413552201}, {-10882633, -4025791}, {187450284, 189620126}, {-241379770, -240216513}, {817765168, 824379987}, {445864293, 454218223}, {196684301, 206122628}, {495939180, 505611421}, {-292661665, -284151935}, {864913617, 865960805}, {40301225, 45049370}, {855361806, 864330675}, {484034887, 493077444}, {488604812, 496847618}, {-346495277, -345487456}, {-277280357, -273124512}, {-978580696, -970278727}, {473321746, 475436927}, {-372632173, -370047337}, {937601366, 944687879}, {735219071, 739395318}, {332386998, 336686476}, {81528089, 85870355}, {288869770, 292989319}, {702215646, 705713603}, {-507112596, -501755287}, {148508080, 156674107}, {-525135694, -517117603}, {-613907532, -608667987}, {851494702, 860630236}, {33684709, 36782848}, {-60471836, -56289479}, {137166104, 145801541}, {736280554, 745238940}, {969513083, 976655230}, {497502925, 503937347}, {477472757, 486580314}, {-212367339, -205282524}, {84534731, 91039313}, {-403738741, -394574218}, {-999643246, -992871245}, {968007440, 971402403}, {20004148, 27921651}, {930272236, 936619975}, {434621015, 437439754}, {-832968710, -831141476}, {-880405537, -872217481}, {736178180, 745994586}, {-799644791, -798574235}, {525806889, 531788278}, {-881212488, -876486554}, {775005051, 777670955}, {-231410355, -228430781}, {586762149, 595556678}, {706978223, 712477185}, {419255753, 421942466}, {277179114, 278322330}, {-229604504, -223420608}, {590388211, 593564760}, {519429755, 523325636}, {24140554, 28770738}, {851135390, 854791619}, {-430940104, -427976959}, {-601328276, -594992783}, {750146040, 752302374}, {893656806, 896947607}, {944310770, 952583918}, {64940812, 67832730}, {-304320007, -298356282}, {15171723, 20947668}, {-466368282, -460386996}, {-830666896, -829123050}, {-298671854, -290677554}, {-977608020, -974508765}, {-851924395, -844569723}, {-149998005, -147377883}, {-999433667, -995005851}, {-611445751, -607299652}, {4380203, 9262121}, {250141390, 254170491}, {-180521571, -177120660}, {-319124468, -310185746}, {-8354043, -400419}, {-953614632, -946851183}, {952421779, 958572523}, {924247018, 926150897}, {413893305, 419002239}, {872412969, 882344095}, {593538868, 603490991}, {741585305, 742947825}, {-86280056, -77209598}, {-640930253, -633760175}, {-458955253, -451238975}, {-684024355, -682533117}, {-661864311, -659785429}, {-989854784, -987145110}, {-822955320, -820959803}, {-55512604, -50150153}, {-731076426, -724570533}, {-676711065, -673641578}, {-161761487, -156461796}, {-51262374, -43337625}, {-141855117, -134775173}, {534454072, 539696056}, {170308824, 176368328}, {931538586, 940494740}, {55582474, 62755472}, {-572394120, -562505861}, {931962274, 933107319}, {367863741, 375889916}, {94883907, 98463563}, {987586830, 989191032}, {752781835, 758514402}}));

    }

    public static int sumIntervals(int[][] intervals) {
        Set<Pair<Integer, Integer>> collect = Arrays.stream(intervals)
                .map(e -> Pair.of(e[0], e[1]))
                .collect(Collectors.toSet());
        Set<Pair<Integer, Integer>> resultSet = sum(collect);
        int result = 0;
        for (Pair<Integer, Integer> p : resultSet) {
            result += Math.abs(p.getLeft() - p.getRight());
        }
        return result;
    }

    public static Set<Pair<Integer, Integer>> sum(Set<Pair<Integer, Integer>> collect) {
        Set<Pair<Integer, Integer>> resultSet = new HashSet<>();
        boolean modified = false;
        for (Pair<Integer, Integer> pair : collect) {
            Integer left = pair.getLeft();
            Integer right = pair.getRight();
            for (Pair<Integer, Integer> element : collect) {
                if (!element.equals(pair) && right > element.getLeft()) {
                    if (left <= element.getRight()) {
                        if (element.getLeft() < left) {
                            left = element.getLeft();
                        }
                        if (element.getRight() > right) {
                            right = element.getRight();
                        }
                        modified = true;
                    }
                }
            }
            resultSet.add(Pair.of(left, right));
        }

        if (modified) return sum(resultSet);
        return resultSet;
    }


}
